//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens;
plugins {
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
}

configurations.create("includedLibraries")
configurations.implementation.extendsFrom configurations.includedLibraries

project.addCoreProject()

project.minecraft.mappings channel: "parchment", version: "${project.parchmentMinecraftVersion}-${project.parchmentVersion}-${project.minecraftVersion}"
project.minecraft.accessTransformer = project(':common').file("accesstransformer.cfg")

project.minecraft.runs {
    client { clientRun ->
        clientRun.workingDirectory project.file('run')
        clientRun.ideaModule "${rootProject.name.toLowerCase()}.${project.name.toLowerCase()}.main"
        clientRun.taskName 'Client'
        clientRun.arg "--mixin=${rootProject.name.toLowerCase()}.mixins.json"
        jvmArgs "-Dmixin.debug=true", "-Dmixin.debug.export=true"
        property 'mixin.env.remapRefMap', 'true'
        property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        mods { modsContainer ->
            modsContainer.create(rootProject.name.toLowerCase(), {
                source sourceSets.main
                source project(":common").sourceSets.main
                source project(":core").sourceSets.main
            })
        }
    }
}

project.dependencies.minecraft "net.minecraftforge:forge:${project.minecraftVersion}-${project.forgeVersion}"
project.dependencies.annotationProcessor "org.spongepowered:mixin:${project.mixinAnnotationProcessorVersion}:processor"
project.dependencies.includedLibraries fg.deobf("com.communi-suggestu.scena:scena-forge:${project.scenaVersion}")
project.dependencies.implementation fg.deobf("com.communi-suggestu.scena:scena-core:${project.scenaVersion}")
project.dependencies.implementation fg.deobf("com.communi-suggestu.saecularia-caudices:saecularia-caudices-core:${project.saeculariaCaudicesVersion}")

project.tasks.processResources.from project(":common").file("accesstransformer.cfg")
setupResourceProcessing(project.tasks.processResources)

project.mixin.config "${rootProject.name.toLowerCase()}.mixins.json"
project.mixin.add project.sourceSets.main, "${rootProject.name.toLowerCase()}.refmap.json"

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

jarJar {
    fromRuntimeConfiguration()
    dependencies {
        include(dependency("com.communi-suggestu.scena:scena-forge"))
    }
}

